{"name":"Processor","tagline":"Multi-thread execution in javascript applications","body":"![Travis CI](https://travis-ci.org/jccazeaux/processor.svg?branch=master)\r\n\r\n# Description\r\nTiny library to execute code on multi threads. Result of each thread is resturned as a promise. Processor can use any promise library (see Promise chapter).\r\n\r\n# Installation\r\n\r\n* Download the [latest release](https://github.com/jccazeaux/processor/releases/download/v0.1.0/processor.min.js).\r\n* Clone the repo: `git clone https://github.com/jccazeaux/processor.git`.\r\n* Install with npm: `npm install promised-processor`.\r\n\r\n# Quick start\r\n## Create a new thread\r\n```Javascript\r\nvar t = processor.thread(function(a, b) {\r\n\treturn a + b;\r\n});\r\n```\r\n\r\n## Execute thread\r\n`thread` function returns an object containing a function `exec`. This function will execute the thread. All `exec` arguments will be sent to thread function.\r\n\r\n```Javascript\r\nt.exec(1, 2);\r\n```\r\n\r\n## Get result\r\n`exec` function returns result of thread function as a `promise`.\r\n\r\n```Javascript\r\nt.exec(1, 2)\r\n.then(function(res) {\r\n\tconsole.log(res); // 3\r\n});\r\n```\r\n\r\n## Handle errors\r\nErrors are handled by promise\r\n\r\n```Javascript\r\nprocessor.thread(function() {\r\n\tthrow new Error(\"I failed\");\r\n})\r\n.exec()\r\n.catch(function(message) {\r\n\tconsole.log(message); // I failed\r\n});\r\n```\r\n\r\n# Configuration\r\n## Number of concurrent threads\r\nBy default `processor` will have a pool of two threads. You can configure this number with `config.nbThreads` function\r\n```Javascript\r\nprocessor.config.nbThreads(4);\r\n```\r\nKeep in mind it may be useless to configure more threads than the number of cores.\r\n\r\n## Promises\r\n`processor` can adapt to these promises library\r\n* Ecmascript 2016 (default)\r\n* [Q](http://documentup.com/kriskowal/q/)\r\n* [Bluebird](http://bluebirdjs.com/)\r\n\r\nYou may define use any promise library. You just need to define an adapter. This adapter creates a function that creates the promises and takes `resolve` and `rejects` as parameters.\r\n\r\nAs an exemple, here is default adapter\r\n```Javascript\r\nfunction() {\r\n\tvar res;\r\n\tif (window.Promise) {\r\n\t\tres = function(resolve, reject) {\r\n\t\t\treturn new window.Promise(resolve, reject);\r\n\t\t};\r\n\t} else if (window.Q) {\r\n\t\tres = function(resolve, reject) {\r\n\t\t\treturn Q.Promise(resolve, reject);\r\n\t\t};\r\n\t} else {\r\n\t\tthrow \"No recognized promise library nor ES6 Promise. Try to customize with processor.promiseAdapter\";\r\n\t}\r\n\treturn res;\r\n}\r\n```\r\n\r\nTo define a new one\r\n```Javascript\r\nprocessor.config.promiseAdapter(function() {\r\n\treturn function(resolve, reject) {\r\n\t\t// Code your adapter here\r\n\t};\r\n});\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}